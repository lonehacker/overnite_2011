#include<stdio.h>
#include<stdlib.h>
void m_sort(int numbers[], int temp[], int left, int right);
void merge(int numbers[], int temp[], int left, int mid, int right);
void mergeSort(int numbers[], int temp[], int array_size)
{
  m_sort(numbers, temp, 0, array_size - 1);
}
 
 
void m_sort(int numbers[], int temp[], int left, int right)
{
  int mid;
 
  if (right > left)
  {
    mid = (right + left) / 2;
    m_sort(numbers, temp, left, mid);
    m_sort(numbers, temp, mid+1, right);
 
    merge(numbers, temp, left, mid+1, right);
  }
}
 
void merge(int numbers[], int temp[], int left, int mid, int right)
{
  int i, left_end, num_elements, tmp_pos;
 
  left_end = mid - 1;
  tmp_pos = left;
  num_elements = right - left + 1;
 
  while ((left <= left_end) && (mid <= right))
  {
    if (numbers[left] <= numbers[mid])
    {
      temp[tmp_pos] = numbers[left];
      tmp_pos = tmp_pos + 1;
      left = left +1;
    }
    else
    {
      temp[tmp_pos] = numbers[mid];
      tmp_pos = tmp_pos + 1;
      mid = mid + 1;
    }
  }
 
  while (left <= left_end)
  {
    temp[tmp_pos] = numbers[left];
    left = left + 1;
    tmp_pos = tmp_pos + 1;
  }
  while (mid <= right)
  {
    temp[tmp_pos] = numbers[mid];
    mid = mid + 1;
    tmp_pos = tmp_pos + 1;
  }
 
  for (i=0; i <= num_elements; i++)
  {
    numbers[right] = temp[right];
    right = right - 1;
  }
}

int main()
{
	int *b,length,max1 = -32768,max2 = -32768,max = -32768,m,count;
int *a;int i,x;
a = (int *)malloc(length*sizeof(int));
b = (int *)malloc(length*sizeof(int));
scanf("%i",&length);
a = (int *)malloc(length*sizeof(int));
b = (int *)malloc(length*sizeof(int));
for(count = 0;count<length;count++)
 {scanf("%i",&a[count]);}
 
 mergeSort(a,b,length);
 if(length%2==0)
  {
   for(i=0;i<=length/2-1;i++)
    {
     if((x = a[i]+a[length-1-i])>max) max = x;	 
    }
    printf("%i",max);
  }
 if(length%2!=0)
  {
	 if(a[0]<=0)
     {
	   for(i=1;i<=(length-1)/2;i++)
       {
        if((x = a[i]+a[length-i])>max) max = x;	 
       }
       if(a[0]>max) max = a[0];
     }
    if(a[0]>=0)
     {
	   for(i=0;i<=(length-1)/2-1;i++)
       {
        if((x = a[i]+a[length-i-2])>max1) max1 = x;	 
       }
       if(a[length-1]>max1) max1 = a[length-1];
     }
    for(i=0;i<=(length-3)/2;i++)
     {
      if((x = a[i]+a[length-1-i])>max) max2 = x;	 
     }
    if(a[(length-1)/2]>max2) max2 = a[length-1];
  
	  if(a[0]<0) {max>max2?printf("%i",max2):printf("%i",max);}
	  if(a[0]>0) {max1>max2?printf("%i",max2):printf("%i",max1);}
     if(a[0]==0)
     { m = max;
       if (m > max1) m = max1;
       if (m > max2) 
        {
	      m = max2;
         
        }
        printf("%i",m);
     }
}}
